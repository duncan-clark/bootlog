table
table <- do.call(rbind,diagnostics)
table
table <- cbind(names(output$sample[[1]]),table)
table
dim(table)
names(table)[1] <- "Parameter"
table
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table
names(table)
table <- as.data.frame(table)
names(table)[1] <- "parameter"
table
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[i] <- gelman.diag(MCMC_list)
}
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
par(mfrow(c(length(output$sample[[1]]),1)))
for(i in 1:length(diagnostics)){
plot(diagnostics[[i]])
}
return(table)
}
plot_gelman(test_8,8)
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[i] <- gelman.diag(MCMC_list)
}
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
par(mfrow = c(length(output$sample[[1]]),1))
for(i in 1:length(diagnostics)){
plot(diagnostics[[i]])
}
return(table)
}
plot_gelman(test_8,8)
help(gelman)
help(gelman.plot)
names(output$sample[[1]])
names(output$sample[[1]])[1]
names(output$sample[[1]])[2]
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
plots[[i]] <- gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
plots[[i]] <- gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
plots[[1]]
plots[[2]]
plot(plots[[1]])
plots[[1]]
plots[[1]].plot()
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
gridExtra::grid.arrange(plots,ncol=2)
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
return(table)
}
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
gridExtra::grid.arrange(plots,ncol=2)
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
return(table)
}
plot_gelman(test_8,8)
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
gridExtra::grid.arrange(ncol=2)
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
return(table)
}
plot_gelman(test_8,8)
gridExtra::grid.arrange(ncol=2)
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
gridExtra::grid.arrange(nrow = 2,ncol=2)
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
return(table)
}
plot_gelman(test_8,8)
gridExtra::grid.arrange(nrow = 2,ncol=2)
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
plots[[i]] <- as.grob(gelman.plot(MCMC_list,main = names(output$sample[[1]])[i]))
}
gridExtra::grid.arrange(plots,nrow = 2,ncol=2)
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
return(table)
}
plot_gelman(test_8,8)
require(grid)
require(ggplotify)
install.packages(ggplotify)
install.packages("ggplotify")
require(ggplotify)
plot_gelman <- function(output,n_perms){
#plot the gelman diagnostics
len <- length(output$sample)/n_perms
diagnostics <- list()
plots <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
plots[[i]] <- as.grob(gelman.plot(MCMC_list,main = names(output$sample[[1]])[i]))
}
gridExtra::grid.arrange(plots,nrow = 2,ncol=2)
table <- do.call(rbind,diagnostics)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
return(table)
}
plot_gelman(test_8,8)
help("gelman.plot")
plot_gelman(test_8,8)
len <- length(output$sample)/n_perms
diagnostics <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
len <- length(output$sample)/n_perms
diagnostics <- list()
for(i in 1:length(output$sample[[1]])){
MCMC_list <- lapply(0:(n_perms-1),function(x){
tmp <- output$sample[(1+x*len):((x+1)*len)]
tmp <- sapply(tmp,function(x){x[i]})
return(as.mcmc(tmp))
})
diagnostics[[i]] <- gelman.diag(MCMC_list)
gelman.plot(MCMC_list,main = names(output$sample[[1]])[i])
}
table
table <- do.call(rbind,diagnostics)
table
diagnostics
table <- do.call(rbind,diagnostics)
table
table <- do.call(rbind,lapply(diagnostics,function(x){x[[1]]}))
table
table <- cbind(names(output$sample[[1]]),table)
table
table <- as.data.frame(table)
table
names(table)[1] <- "Parameter"
table
table <- do.call(rbind,lapply(diagnostics,function(x){x[[1]]}))
table <- round(table,4)
table <- cbind(names(output$sample[[1]]),table)
table <- as.data.frame(table)
names(table)[1] <- "Parameter"
table
tmp <- lapply(sample_10$full_results,function(x){x$sample_results})
tmp <- do.call(c,tmp)
tmp <- as.data.frame(tmp)
names(tmp) <- NULL
tmp <- t(as.matrix(tmp))
tmp
head(tmp)
sapply(1:length(model$theta),function(x){hist(tmp[,x],main  = paste( names(model$theta)[x], " parameter distribution",sep=""))})
model <- lolog(net_1 ~ edges + triangles + star(c(2,3)))
tmp <- lapply(sample_10$full_results,function(x){x$sample_results})
tmp <- do.call(c,tmp)
tmp <- as.data.frame(tmp)
names(tmp) <- NULL
tmp <- t(as.matrix(tmp))
par(mfrow = c(2,2))
setwd("C:/Users/Duncan/Documents/Academics/UCLA_Academics/Networks/LOLOG_Cateloging/1_16_KapfererTailors")
load("processed_data.RData")
model <- lolog(net_1 ~ edges + triangles + star(c(2,3)))
tmp <- lapply(sample_10$full_results,function(x){x$sample_results})
tmp <- do.call(c,tmp)
tmp <- as.data.frame(tmp)
names(tmp) <- NULL
tmp <- t(as.matrix(tmp))
par(mfrow = c(2,2))
sapply(1:length(model$theta),function(x){hist(tmp[,x],main  = paste( names(model$theta)[x], " parameter distribution",sep=""))})
help("hist")
head(tmp)
tmp <- lapply(sample_10$full_results,function(x){x$sample_results})
tmp <- do.call(c,tmp)
tmp <- as.data.frame(tmp)
names(tmp) <- NULL
tmp <- t(as.matrix(tmp))
par(mfrow = c(2,2))
head(tmp)
length(model$theta)
i=1
hist(tmp[,i],main  = paste( names(model$theta)[tmp[,i]], " parameter distribution",sep=""))
hist(tmp[,i],main  = paste( names(model$theta)[]i, " parameter distribution",sep=""))
hist(tmp[,i],main  = paste( names(model$theta)[i], " parameter distribution",sep=""))
setwd("C:/Users/Duncan/Documents/Academics/UCLA_Academics/Networks/LOLOG_Cateloging/1_16_KapfererTailors")
load("processed_data.RData")
model <- lolog(net_1 ~ edges + triangles + star(c(2,3)))
tmp <- lapply(sample_10$full_results,function(x){x$sample_results})
tmp <- do.call(c,tmp)
tmp <- as.data.frame(tmp)
names(tmp) <- NULL
tmp <- t(as.matrix(tmp))
par(mfrow = c(2,2))
for(i in 1:length(model$theta)){
hist(tmp[,i],main  = paste( names(model$theta)[i], " parameter distribution",sep=""))
}
median_posterior <- apply(tmp,2,median)
se_posterior <- apply(tmp,2,sd)
p_vals <- apply(tmp,2,function(x){
(mean(x)>0)*(mean(x>0)) +
(mean(x)<=0)*mean((x<=0))
})
table <- cbind(names(tmp),median_posterior,se_posterior,p_vlas)
na
tmp <- as.data.frame(tmp)
names(tmp) <- c("edges","triangles","star.2","star.3")
plot <- ggplot(tmp,aes(x=star.2,y=edges,colour = triangles))+
geom_point(size = 3,alpha = 0.5)+
scale_colour_gradient(low= "yellow",high = "red")
print(plot)
head(tmp)
median_posterior <- apply(tmp,2,median)
se_posterior <- apply(tmp,2,sd)
p_vals <- apply(tmp,2,function(x){
(mean(x)>0)*(mean(x>0)) +
(mean(x)<=0)*mean((x<=0))
})
table <- cbind(names(tmp),median_posterior,se_posterior,p_vlas)
names(table) = c("Statistic","Mean","SE","P-value")
median_posterior <- apply(tmp,2,median)
se_posterior <- apply(tmp,2,sd)
p_vals <- apply(tmp,2,function(x){
(mean(x)>0)*(mean(x>0)) +
(mean(x)<=0)*mean((x<=0))
})
table <- cbind(names(tmp),median_posterior,se_posterior,p_vals)
names(table) = c("Statistic","Mean","SE","P-value")
head(tmp)
table
table <- as.data.frame(table)
names(table) = c("Statistic","Mean","SE","P-value")
table
dim(table)
dim(table)
table
median_posterior <- apply(tmp,2,median)
se_posterior <- apply(tmp,2,sd)
p_vals <- apply(tmp,2,function(x){
(mean(x)>0)*(mean(x>0)) +
(mean(x)<=0)*mean((x<=0))
})
names(tmp)
median_posterior
table <- cbind(median_posterior,se_posterior,p_vals)
table
as.data.frame(table)
table <- as.data.frame(table,rownames = NULL)
table
help("as.data.frame")
table <- as.data.frame(table,row.names = NULL)
table
table <- as.data.frame(table,row.names = c())
table
rownames(data) <- c()
table
rownames(table) <- c()
table
table <- cbind(names(tmp),median_posterior,se_posterior,p_vals)
rownames(table) <- c()
table
table <- round(table,4)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- round(table,4)
rownames(table) <- c()
table <- cbind(names(tmp),table)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- round(table,4)
table <- as.numeric(table)
rownames(table) <- c()
table <- cbind(names(tmp),table)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- round(table,4)
rownames(table) <- c()
table <- cbind(names(tmp),table)
names(table) = c("Statistic","Mean","SE","P-value")
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- round(table,4)
rownames(table) <- c()
table <- cbind(names(tmp),table)
table <- as.data.frame(table)
names(table) = c("Statistic","Mean","SE","P-value")
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- format(table, scientific=F)
table
table <- as.numeric(table)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- as.numeric(format(table, scientific=F))
table <- round(table,4)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table
table <- as.numeric(format(table, scientific=F))
table
table <- round(table,4)
table
help(round)
table <- cbind(median_posterior,se_posterior,p_vals)
table <- as.numeric(format(table, scientific=F))
table <- apply(table,1,round)
table
dim(table)
class(table)
table <- cbind(median_posterior,se_posterior,p_vals)
table <- as.matrix(as.numeric(format(table, scientific=F)),nrow = dim(table)[1])
table
table <- cbind(median_posterior,se_posterior,p_vals)
dim(table)
table <- matrix(as.numeric(format(table, scientific=F)),nrow = dim(table)[1])
table
table <- cbind(median_posterior,se_posterior,p_vals)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- as.data.frame(table)
table
round(table,4)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- as.data.frame(table)
table <- round(table,4)
table
table <- cbind(median_posterior,se_posterior,p_vals)
table <- as.data.frame(table)
table <- round(table,4)
rownames(table) <- c()
table <- cbind(names(tmp),table)
table <- as.data.frame(table)
names(table) = c("Statistic","Mean","SE","P-value")
table
mean_posterior <- apply(tmp,2,mean)
se_posterior <- apply(tmp,2,sd)
p_vals <- apply(tmp,2,function(x){
(mean(x)>0)*(mean(x<=0)) +
(mean(x)<=0)*mean((x>0))
})
table <- cbind(mean_posterior,se_posterior,p_vals)
table <- as.data.frame(table)
table <- round(table,4)
rownames(table) <- c()
table <- cbind(names(tmp),table)
table <- as.data.frame(table)
names(table) = c("Statistic","Mean","SE","P-value")
table
getwd()
setwd("..")
setwd("..")
setwd("LOLOG_Bootstrapped_SEs")
require(devtools::)
require(devtools)
create("bootlog")
create_package("bootlog")
devtools::create("bootlog")
help(create)
create_package("bootlog")
getwd()
setwd("Bootlog")
getwd()
tmp <- devtools::build()
install.packages(tmp,repos = NULL,type = "source")
require(bootlog)
require(bootlog)
getwd()
tmp <- devtools::build()
install.packages(tmp,repos = NULL,type = "source")
tmp <- devtools::build()
install.packages(tmp,repos = NULL,type = "source")
require(bootlog)
bootstraps <- bootlog::bootlog_process(model,
seed =123456,
fits = seq(1,11,5),
cores = 2,
MoreArgs = NULL)
getwd()
tmp <- devtools::build()
install.packages(tmp,repos = NULL,type="source")
