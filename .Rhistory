getwd()
library(Blolog)
library(statnet)
library(lolog)
library(coda)
library(doParallel)
library(ggplot2)
require(bootlog)
load("processed_data_kapferer.RData")
model <- lolog(net_1 ~ edges + triangles + star(c(2,3)))
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(1),
cores = 1,
MoreArgs = NULL)
debug(bootlog_process)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(1),
cores = 1,
MoreArgs = NULL)
undebug(bootlog_process)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(2),
cores = 1,
MoreArgs = NULL)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
debug(bootlog_process)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
tmp
debug(bootlog)
debug(bootlog_process)
debug(bootlog)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
fits
fits[[1]]
model <- lolog(net_1 ~ edges + triangles + star(c(2,3)))
model$net
model$formula
tmp <- lolog::createCppModel(model$formula)
tmp
tmp.simulate()
simulate(tmp)
model
type(model)
class(model)
tmp$thetas <- model$theta
tmp$thetas
tmp$thetas()
lolog::createLatentOrderLikelihood(model$formula)
tmp <- lolog::createLatentOrderLikelihood(model$formula)
tmp
tmp$generateNetwork()
tmp$generateNetwork()
tmp$generateNetwork()
tmp$generateNetwork()
tmp$generateNetwork()
tmp$generateNetwork()
tmp$generateNetwork()
tmp$generateNetwork()
model$theta
tmp$generateNetwork()
#Fits done under parallisation in estimates_test
#estimates_test returns the LOLOG fits.
bootlog <- function(lolog,
seed = 1,
fits = 10,
cores = 2,
MoreArgs = NULL,
keep_nets = F){
#MoreArgs are additional arguments needed for network fitting e.g. edge covariate matrices
#load in MoreArgs
if(!is.null(MoreArgs)){
for(i in 1:length(MoreArgs)){
assign(names(MoreArgs)[i],MoreArgs[[i]])
}
}
#generate the network
net <- simulate(lolog,nsim = 1,seed= seed)
net <- lolog::as.network(net[[1]])
#make sure network is what we want
formula <- as.character(lolog$formula)
formula[2] <- "sim_net"
formula <- as.formula(paste(formula[2],formula[1],formula[3]))
# #Check that we can fit a lolog to this network:
# if(is.null(tryCatch({lolog(formula)},
#                     error = function(e){print("Unable to fit the LOLOG to the simulated network")
#                       return(NULL)}))){return(NULL)}
#get the model parameters
thetas = lolog$theta
fit <- function(formula){
sim_net <- net
lolog = lolog::createLatentOrderLikelihood(formula)
lolog$setThetas(thetas)
sim_net <- lolog::as.network(lolog$generateNetwork()$network)
tmp <- tryCatch({lolog(formula,verbose = 0)},
error = function(e){return(NA)},
warning = function(w){if(w$message == "In lolog(formula) : Singular statistic covariance matrix. Using diagnoal."){return(NA)}}
)
if(length(tmp)==0){return(NA)}
if(is.na(tmp)){
return(tmp)
}else{
if(keep_nets){return(list(fit = tmp$theta,net = sim_net))
}else{rm(sim_net)
return(list(fit = tmp$theta))}
}
}
print(paste("The parallelisation started at ", Sys.time(),sep = ""))
#if the fits are more that 1000 split up into batches of 1000
cl <- parallel::makeCluster(cores)
registerDoParallel(cl)
parallel::clusterExport(cl,varlist = c("net","thetas"))
fits <- foreach(i = (1:fits), .inorder = FALSE, .packages = "lolog",.errorhandling = "pass") %dopar% {fit(formula)}
parallel::stopCluster(cl)
print(paste("The parallelisation ended at ", Sys.time(),sep = ""))
if(keep_nets){
return(list(fits = lapply(fits,function(x){x$fit}),nets = lapply(fits,function(x){x$net})))
}else{
return(list(fits = lapply(fits,function(x){x$fit})))
}
}
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
undebug(bootlog)
undebug(bootlog_process)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
getwd()
rm(list=ls())
library(Blolog)
library(statnet)
library(lolog)
library(coda)
library(doParallel)
library(ggplot2)
require(bootlog)
load("processed_data_kapferer.RData")
model <- lolog(net_1 ~ edges + triangles + star(c(2,3)))
#===== Check bootstrap standard errors======#
bootstraps <- bootlog::bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
bootlog
debug(bootlog)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog::bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
debug(bootlog)
#===== Check bootstrap standard errors======#
bootstraps <- bootlog::bootlog_process(model,
seed =123456,
fits = c(10),
cores = 1,
MoreArgs = NULL)
thetas
net
parallel::clusterExport(cl, varlist = c("net", "thetas"))
parallel::clusterExport(cl, varlist = c( "thetas"))
help(clusterExport)
parallel::clusterExport(cl, varlist = c( "thetas"),envir = environment())
source('~/Academics/UCLA_Academics/Networks/LOLOG_Bootstrapped_SEs/Bootlog_build.R', echo=TRUE)
